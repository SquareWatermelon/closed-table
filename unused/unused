#sub retrieveInput{
#    if($ENV{'CONTENT_LENGTH'} == 0){ return { 'ip' => $ENV{'REMOTE_ADDR'} } };
#    my $length = $ENV{'CONTENT_LENGTH'};
#    read( STDIN, my $in, $length );
#    print $in;
#    #ensure input can't be screwed with by adding = or -
#    if($in =~ m/\%61/){ print "invalid input"; }
#    $in =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
#    my %in = %{splitKeys($in)};
#    $in{"ip"} = $ENV{'REMOTE_ADDR'};
#    return \%in;
#}

#return 1 if the user already exists rewrite by robert
#sub userExists{
#    my $user = shift;
#    open(my $USERS, "<users.txt") || print "Couldnt open users.txt";
#    my $temp = local $/; 
#    local $/= undef;
#    my $test = <$USERS>;
#    print $test;
#    local $/= $temp;
#    while( $test =~/([^:]*):([^:]*):([^:]*)/g){
#        if($1 eq $user){ 
#            close($USERS); 
#            return 1 ;
#        }
#    }
#    close($USERS);
#    return 0;
#}

#sub retrieveInput{
#    if($ENV{'CONTENT_LENGTH'} == 0){ return { 'ip' => $ENV{'REMOTE_ADDR'} } };
#    my $length = $ENV{'CONTENT_LENGTH'};
#    read( STDIN, my $in, $length );
#    print $in;
#    #ensure input can't be screwed with by adding = or -
#    if($in =~ m/\%61/){ print "invalid input"; }
#    $in =~ s/\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;
#    my %in = %{splitKeys($in)};
#    $in{"ip"} = $ENV{'REMOTE_ADDR'};
#    return \%in;
#}
#switch($in{"state"}){
#    case "mkEmail"      { 
#        my $warningString = getMkEmailWarnings($in{"emailUser"}, $in{'mkEmail'});
#        if( $warningString ne '' ){
#            email($in{"emailUser"}, $in{'mkEmail'}) 
#        }else{
#            alert($warningString);
#            unshift @_, 0;
#        }
#    }
#    case "mkReserve"    { unshift @_, 0; }#mkReserve() }
#    case "mkStore"      { mkStore(\%in) }
#    case "mkUser"       { 
#        my $warningString = getMkUserWarnings(
#            $in{"mkUserName"}, 
#            $in{"mkPassword"}, 
#            $in{"mkEmail"   });
#        if( $warningString ne '' ){
#            mkUser($in{"mkUserName"}, $in{"mkPassword"}, $in{"mkEmail"}) 
#        }
#        else {
#            alert($warningString);
#            unshift @_, "mkUser";
#        }
#    }
#    case "rmReserve"    { rmReserve(\%in) }
#    case "rmStore"      { mkStore(\%in) }
#    case "rmUser"       { rmUser(\%in) }
#    case "skip"         { unshift @_, 0; }
#    case "tryLogin"     { 
#        unshift @_, "startReserve" 
#        #unshift @_, "login";
#        #unshift @_, $isValidPass{$in{"password"}}
#        #unshift @_, $isValidUser{$in{"user"}}
#    }
#    case undef          { unshift @_, "login"; }
#    else                { alert('Bad submission error 10!' . $in{"state"} )}
#}
#does not account for the skipped leap years every whatever hundred years
sub isValidDate {
    my $date = shift;
    if($date =~ /(\d?\d)\D(\d?\d)\D(\d{1,4})/){
        my ($month, $day, $year) = ($1, $2, $3);
        if (not ($month > 0 and $month <= 12)){ return 0 };
        if ($day < 0){ return 0 };
        #31 day months
        if ($month =~ /^(1|3|5|6|7|10|12)$/){
            if (not ($day <= 31)){ return 0 };
        }else{ #30 day and feb
            if ($month == 2 ) {
                if($year % 4 != 0){
                     if(not($day <= 28)){ return 0 };
                }elsif(not($day <= 29)){ return 0 };
            }else{
                if (not ($day <= 30)){ return 0 };
            }
        }
        return 1;#($month, $day, $year);
    }else{ 
        return 0;
    }
}